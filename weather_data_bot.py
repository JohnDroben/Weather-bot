import logging
import os
import asyncio
import sqlite3
import aiohttp

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

load_dotenv()
logging.basicConfig(level=logging.INFO)

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()


class Form(StatesGroup):
    name = State()
    age = State()
    grade = State()
    city = State()


def init_db():
    conn = sqlite3.connect('school_data.db')
    cur = conn.cursor()
    cur.execute('''CREATE TABLE IF NOT EXISTS students (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    age INTEGER NOT NULL,
                    grade TEXT NOT NULL,
                    city TEXT NOT NULL
                )''')
    conn.commit()
    conn.close()


init_db()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –ø–æ–≥–æ–¥—ã
def get_weather_icon(code: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–¥—É"""
    icons = {
        '01': '‚òÄÔ∏è',  # —è—Å–Ω–æ
        '02': '‚õÖ',  # –º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ
        '03': '‚òÅÔ∏è',  # –æ–±–ª–∞—á–Ω–æ
        '04': '‚òÅÔ∏è',  # –ø–∞—Å–º—É—Ä–Ω–æ
        '09': 'üåßÔ∏è',  # –¥–æ–∂–¥—å
        '10': 'üå¶Ô∏è',  # –¥–æ–∂–¥—å —Å —Å–æ–ª–Ω—Ü–µ–º
        '11': '‚õàÔ∏è',  # –≥—Ä–æ–∑–∞
        '13': '‚ùÑÔ∏è',  # —Å–Ω–µ–≥
        '50': 'üå´Ô∏è'  # —Ç—É–º–∞–Ω
    }
    return icons.get(code[:2], 'üåà')


@dp.message(Command('start'))
async def start_handler(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=None)
    await state.set_state(Form.name)


@dp.message(Form.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    await state.set_state(Form.age)


@dp.message(Form.age)
async def process_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        if age < 5 or age > 20:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (5-20 –ª–µ—Ç)")
            return
        await state.update_data(age=age)
        await message.answer("–ö–∞–∫–æ–π —É —Ç–µ–±—è –∫–ª–∞—Å—Å?")
        await state.set_state(Form.grade)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞")


@dp.message(Form.grade)
async def process_grade(message: Message, state: FSMContext):
    await state.update_data(grade=message.text)
    await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –∂–∏–≤–µ—à—å?")
    await state.set_state(Form.city)


@dp.message(Form.city)
async def process_city(message: Message, state: FSMContext):
    city = message.text
    await state.update_data(city=city)
    data = await state.get_data()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = (
        f"‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
        f"üè´ –ö–ª–∞—Å—Å: {data['grade']}\n"
        f"üìç –ì–æ—Ä–æ–¥: {city}"
    )
    await message.answer(response)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        conn = sqlite3.connect('school_data.db')
        cur = conn.cursor()
        cur.execute('''
            INSERT INTO students (name, age, grade, city) 
            VALUES (?, ?, ?, ?)''',
                    (data['name'], data['age'], data['grade'], city))
        conn.commit()
        conn.close()
    except sqlite3.Error as e:
        logging.error(f"Database error: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É
    try:
        async with aiohttp.ClientSession() as session:
            url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={os.getenv('OWM_API_KEY')}&units=metric&lang=ru"
            async with session.get(url) as response:
                if response.status == 200:
                    weather_data = await response.json()
                    temp = weather_data['main']['temp']
                    feels_like = weather_data['main']['feels_like']
                    humidity = weather_data['main']['humidity']
                    wind = weather_data['wind']['speed']
                    description = weather_data['weather'][0]['description'].capitalize()
                    icon = get_weather_icon(weather_data['weather'][0]['icon'])

                    weather_response = (
                        f"{icon} <b>–ü–æ–≥–æ–¥–∞ –≤ {city}</b>\n\n"
                        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                        f"üå° –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n"
                        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                        f"üå¨ –í–µ—Ç–µ—Ä: {wind} –º/—Å\n"
                        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}"
                    )
                    await message.answer(weather_response)
                else:
                    error_text = await response.text()
                    await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {response.status} - {error_text}")
    except Exception as e:
        logging.error(f"Weather API error: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ")

    await state.clear()


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())


