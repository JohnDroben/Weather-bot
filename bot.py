import logging
import os
import requests
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message
from dotenv import load_dotenv
from keyboards import get_city_keyboard

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
WEATHER_URL = "https://api.openweathermap.org/data/2.5/weather"
DEFAULT_CITIES = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–û–¥–µ—Å—Å–∞"]


def get_weather(city: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ —á–µ—Ä–µ–∑ API"""
    params = {
        'q': city,
        'appid': os.getenv("OWM_API_KEY"),
        'units': 'metric',
        'lang': 'ru'
    }

    try:
        response = requests.get(WEATHER_URL, params=params)
        data = response.json()

        if response.status_code != 200:
            return f"–û—à–∏–±–∫–∞: {data.get('message', 'Unknown error')}"

        return format_weather(data)

    except Exception as e:
        logging.error(f"Weather API error: {e}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


def format_weather(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ"""
    city = data['name']
    temp = data['main']['temp']
    feels_like = data['main']['feels_like']
    humidity = data['main']['humidity']
    wind = data['wind']['speed']
    description = data['weather'][0]['description'].capitalize()
    icon = get_weather_icon(data['weather'][0]['icon'])

    return (
        f"{icon} <b>–ü–æ–≥–æ–¥–∞ –≤ {city}</b>\n\n"
        f"üå° {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
        f"üìù {description}\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
        f"üå¨ –í–µ—Ç–µ—Ä: {wind} –º/—Å"
    )


def get_weather_icon(code: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–¥—É"""
    icons = {
        '01': '‚òÄÔ∏è',  # —è—Å–Ω–æ
        '02': '‚õÖ',  # –º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ
        '03': '‚òÅÔ∏è',  # –æ–±–ª–∞—á–Ω–æ
        '04': '‚òÅÔ∏è',  # –ø–∞—Å–º—É—Ä–Ω–æ
        '09': 'üåßÔ∏è',  # –¥–æ–∂–¥—å
        '10': 'üå¶Ô∏è',  # –¥–æ–∂–¥—å —Å —Å–æ–ª–Ω—Ü–µ–º
        '11': '‚õàÔ∏è',  # –≥—Ä–æ–∑–∞
        '13': '‚ùÑÔ∏è',  # —Å–Ω–µ–≥
        '50': 'üå´Ô∏è'  # —Ç—É–º–∞–Ω
    }
    return icons.get(code[:2], 'üåà')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(Command('start'))
async def start_handler(message: Message):
    await message.answer(
        "üå§Ô∏è –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–º–µ—Ç–µ–æ—Ä–æ–ª–æ–≥.\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=get_city_keyboard()
    )

@dp.message(Command('help'))
async def help_handler(message: Message):
    await message.answer(
        "–≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã:"
        "\n/start"  "- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"
        "\n/help"  "- –ü–æ–º–æ—â—å"
        "\n/cities"  "- –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞",
        reply_markup = get_city_keyboard()

    )

@dp.message(Command("cities"))
async def cities_handler(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        reply_markup=get_city_keyboard()
    )


@dp.message(F.text)
async def weather_handler(message: Message):
    city = message.text.strip()
    weather = get_weather(city)
    await message.answer(weather, parse_mode="HTML")




# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    dp.run_polling(bot)